{"version":3,"sources":["transition/scale.module.css","transition/slide.module.css","components/contactList/contactListItem/contactListItem.module.css","components/filter/filter.module.css","components/contactList/contactList.module.css","components/App.module.css","transition/fade.module.css","transition/rotate.module.css","components/contactForm/ContactForm.js","components/contactList/contactListItem/ContactListItem.js","components/contactList/ContactList.js","components/filter/Filter.js","redux/contacts/contactsActions.js","components/App.js","redux/contacts/contactsType.js","redux/contacts/contactsReducer.js","redux/store.js","index.js","components/contactForm/contactForm.module.css"],"names":["module","exports","ContactForm","state","name","number","isVisible","handleSubmit","e","preventDefault","doublicateContact","props","contacts","map","contact","alert","includes","target","value","store","addNotification","title","message","type","insert","container","animationIn","animationOut","dismiss","duration","showIcon","newContact","id","uuidv4","addContact","setState","handleChange","this","CSSTransition","in","timeout","classNames","scaleTransition","mountOnEnter","className","styles","form","onSubmit","label","input","placeholder","minLength","maxLength","onChange","button","Component","ContactListItem","deleteContact","item","onClick","ContactList","TransitionGroup","component","list","key","unmountOnExit","slideTransition","Filter","filter","filterContact","proptTypes","PropTypes","string","func","createAction","App","filteredContacts","toLowerCase","length","fadeTransition","mapDispatchToProps","contactsActions","connect","items","createReducer","actionTypes","payload","combineReducers","persistConfig","storage","persistedReducer","persistReducer","contactsReducer","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","persistor","persistStore","ReactDOM","render","loading","document","getElementById"],"mappings":"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","file":"static/js/main.69f5ffd9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"scale_enter__2NcM2\",\"enterActive\":\"scale_enterActive__kbpij\",\"exit\":\"scale_exit__2ZsvX\",\"exitActive\":\"scale_exitActive__3p2sW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"slide_enter__1UsTL\",\"enterActive\":\"slide_enterActive__2XfLs\",\"exit\":\"slide_exit__1PD-N\",\"exitActive\":\"slide_exitActive__dxmwS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"contactListItem_item__14xba\",\"button\":\"contactListItem_button__3kMQX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"filter_title__25vQp\",\"input\":\"filter_input__1P2B1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"contactList_list__2dk2x\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"App_title__9Jsmj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"fade_enter__FBgIn\",\"enterActive\":\"fade_enterActive__hfjZI\",\"exit\":\"fade_exit__3xwR1\",\"exitActive\":\"fade_exitActive__2JlNG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"rotate_enter__1Efjy\",\"enterActive\":\"rotate_enterActive__1tGfs\",\"exit\":\"rotate_exit__D39zs\",\"exitActive\":\"rotate_exitActive__dHvCd\"};","import React, { Component } from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport styles from './contactForm.module.css';\r\nimport PropTypes from 'prop-types';\r\nimport ReactNotification from 'react-notifications-component';\r\nimport 'react-notifications-component/dist/theme.css';\r\nimport { store } from 'react-notifications-component';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport scaleTransition from '../../transition/scale.module.css';\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n    isVisible: false,\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setState({\r\n      isVisible: true,\r\n    });\r\n  }\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    const { name, number } = this.state;\r\n    const doublicateContact = this.props.contacts.map(contact => contact.name);\r\n    if (!(name && number)) {\r\n      return alert('Please, fill all fields');\r\n    }\r\n    if (doublicateContact.includes(e.target.name.value)) {\r\n      return store.addNotification({\r\n        title: 'Oooops:(',\r\n        message: 'Contact already exist',\r\n        type: 'danger',\r\n        insert: 'top',\r\n        container: 'top-right',\r\n        animationIn: ['animated', 'fadeIn'],\r\n        animationOut: ['animated', 'fadeOut'],\r\n        dismiss: {\r\n          duration: 1000,\r\n          showIcon: true,\r\n        },\r\n      });\r\n    } else {\r\n      const newContact = { id: uuidv4(), name, number };\r\n      this.props.addContact(newContact);\r\n      this.setState({\r\n        name: '',\r\n        number: '',\r\n      });\r\n    }\r\n  };\r\n\r\n  handleChange = e => {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  };\r\n\r\n  render() {\r\n    const { name, number, isVisible } = this.state;\r\n    return (\r\n      <>\r\n        <ReactNotification />\r\n        <CSSTransition\r\n          in={isVisible}\r\n          timeout={500}\r\n          classNames={scaleTransition}\r\n          mountOnEnter\r\n        >\r\n          <h2 className={styles.title}>Phonebook</h2>\r\n        </CSSTransition>\r\n        <form className={styles.form} onSubmit={this.handleSubmit}>\r\n          <label className={styles.label}>\r\n            Name\r\n            <input\r\n              className={styles.input}\r\n              type=\"text\"\r\n              name=\"name\"\r\n              value={name}\r\n              placeholder=\"Enter full name\"\r\n              minLength=\"4\"\r\n              maxLength=\"20\"\r\n              onChange={this.handleChange}\r\n            />\r\n          </label>\r\n          <label className={styles.label}>\r\n            Number\r\n            <input\r\n              className={styles.input}\r\n              type=\"tel\"\r\n              name=\"number\"\r\n              value={number}\r\n              placeholder=\"+38 (___) ___ __ __\"\r\n              minLength=\"10\"\r\n              maxLength=\"13\"\r\n              onChange={this.handleChange}\r\n            />\r\n          </label>\r\n          <button className={styles.button} type=\"submit\">\r\n            Add contact\r\n          </button>\r\n        </form>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nContactForm.propTypes = {\r\n  contacts: PropTypes.arrayOf(PropTypes.object),\r\n  addContact: PropTypes.func,\r\n};\r\n\r\n\r\nexport default ContactForm;\r\n","import React from 'react';\r\nimport styles from '../contactListItem/contactListItem.module.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const ContactListItem = ({ contact, deleteContact }) => (\r\n  <>\r\n    <li className={styles.item}>{contact.name + ': ' + contact.number}</li>\r\n    <button className={styles.button} id={contact.id} onClick={()=>deleteContact(contact.id)}>\r\n      Delete\r\n    </button>\r\n  </>\r\n);\r\n\r\nContactListItem.propTypes = {\r\n  contact: PropTypes.shape({\r\n    id: PropTypes.string,\r\n    name: PropTypes.string.isRequired,\r\n    number: PropTypes.string.isRequired,\r\n  }),\r\n  deleteContact: PropTypes.func,\r\n};\r\n","import React from 'react';\r\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\r\nimport { ContactListItem } from './contactListItem/ContactListItem';\r\nimport styles from './contactList.module.css';\r\nimport PropTypes from 'prop-types';\r\nimport slideTransition from '../../transition/slide.module.css';\r\n\r\nconst ContactList = ({ contacts, deleteContact }) => (\r\n  <TransitionGroup component=\"ul\" className={styles.list}>\r\n    {contacts.map(contact => (\r\n      <CSSTransition\r\n        key={contact.id}\r\n        timeout={250}\r\n        unmountOnExit\r\n        classNames={slideTransition}\r\n      >\r\n        <ContactListItem\r\n          key={contact.id}\r\n          contact={contact}\r\n          deleteContact={deleteContact}\r\n        />\r\n      </CSSTransition>\r\n    ))}\r\n  </TransitionGroup>\r\n);\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(PropTypes.object),\r\n  filter: PropTypes.string,\r\n  deleteContact: PropTypes.func,\r\n};\r\n\r\n\r\nexport default ContactList;\r\n","import React from 'react';\r\nimport styles from '../filter/filter.module.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Filter = ({ filter, filterContact }) => (\r\n  <>\r\n    <h3 className={styles.title}>Find contacts by name</h3>\r\n    <input\r\n      className={styles.input}\r\n      value={filter}\r\n      onChange={e => filterContact(e.target.value)}\r\n    ></input>\r\n  </>\r\n);\r\n\r\nFilter.proptTypes = {\r\n  filter: PropTypes.string,\r\n  filterContact: PropTypes.func,\r\n};\r\n\r\nexport default Filter;\r\n","import { createAction } from '@reduxjs/toolkit';\r\n// import actionTypes from './contactsType';\r\n\r\nconst addContact = createAction('contacts/add');\r\nconst deleteContact = createAction('contacts/delete');\r\nconst filterContact = createAction('contacts/filter');\r\n// const localStorageContact = createAction('contacts/localStorage');\r\n\r\nexport default {\r\n  addContact,\r\n  deleteContact,\r\n  filterContact,\r\n  // localStorageContact,\r\n};\r\n\r\n// const addContact = newContact => ({\r\n//   type: actionTypes.ADD,\r\n//   payload: { newContact },\r\n// });\r\n\r\n// const deleteContact = id => ({\r\n//   type: actionTypes.DELETE,\r\n//   payload: { id },\r\n// });\r\n\r\n// const filterContact = filter => ({\r\n//   type: actionTypes.FILTER,\r\n//   payload: { filter },\r\n// });\r\n\r\n// const localStorageContact = persistedContacts => ({\r\n//   type: actionTypes.LOCAL_STORAGE,\r\n//   payload: { persistedContacts },\r\n// });\r\n","import React, { Component } from 'react';\nimport ContactForm from '../components/contactForm/ContactForm';\nimport ContactList from '../components/contactList/ContactList';\nimport Filter from '../components/filter/Filter';\nimport { CSSTransition } from 'react-transition-group';\nimport { connect } from 'react-redux';\nimport contactsActions from '../redux/contacts/contactsActions';\nimport styles from '../components/App.module.css';\nimport fadeTransition from '../transition/fade.module.css';\nimport slideTransition from '../transition/slide.module.css';\nimport rotateTransition from '../transition/rotate.module.css';\nimport scaleTransition from '../transition/scale.module.css';\n\nclass App extends Component {\n  // componentDidMount() {\n  //   const persistedContacts = localStorage.getItem('contacts');\n  //   if (persistedContacts) {\n  //     this.props.localStorageContact(persistedContacts);\n  //   }\n  // }\n\n  // componentDidUpdate(prevProps, prevState) {\n  //   if (prevProps.contacts !== this.props.contacts) {\n  //     localStorage.setItem('contacts', JSON.stringify(this.props.contacts));\n  //   }\n  // }\n  filteredContacts=() => {\n    return this.props.contacts.filter(contact =>\n      contact.name.toLowerCase().includes(this.props.filter.toLowerCase()),\n    );\n  }\n\n  deleteContact = id => {\n    this.props.deleteContact(id);\n    if (this.filteredContacts().length === 1) {\n      this.props.filterContact('');\n    }\n  };\n  \n  render() {\n    return (\n      <>\n        <ContactForm\n          contacts={this.props.contacts}\n          addContact={this.props.addContact}\n        />\n        <h2 className={styles.title}>Contacts</h2>\n        <CSSTransition\n          in={this.props.contacts.length >= 2 || this.props.filter.length !== 0}\n          timeout={500}\n          classNames={fadeTransition}\n          mountOnEnter\n          unmountOnExit\n        >\n          <Filter\n            filter={this.props.filter}\n            filterContact={this.props.filterContact}\n          />\n        </CSSTransition>\n        <ContactList\n          contacts={this.filteredContacts()}\n          deleteContact={this.deleteContact}\n        />\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    contacts: state.contacts.items,\n    filter: state.contacts.filter,\n  };\n};\n\nconst mapDispatchToProps = {\n  addContact: contactsActions.addContact,\n  filterContact: contactsActions.filterContact,\n  deleteContact: contactsActions.deleteContact,\n  // localStorageContact: contactsActions.localStorageContact,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","const ADD = 'contacts/add';\r\nconst DELETE = 'contacts/delete';\r\nconst FILTER = 'contacts/filter';\r\nconst LOCAL_STORAGE = 'contacts/localStorage'\r\n\r\nexport default {\r\n    ADD,\r\n    DELETE,\r\n    FILTER,\r\n    LOCAL_STORAGE\r\n}","import { combineReducers } from 'redux';\r\nimport actionTypes from './contactsType';\r\nimport {createReducer} from '@reduxjs/toolkit';\r\n\r\nconst items = createReducer([], {\r\n  [actionTypes.ADD]: (state, {payload}) => [...state, payload],\r\n  [actionTypes.DELETE]: (state, {payload}) => state.filter(contact => contact.id !== payload),\r\n  // [actionTypes.LOCAL_STORAGE]: (state, {payload}) => JSON.parse(payload)\r\n})\r\n\r\nconst filter = createReducer('', {\r\n[actionTypes.FILTER]: (state, {payload}) => payload\r\n})\r\n\r\n// const items = (state = [], { type, payload }) => {\r\n//   switch (type) {\r\n//     case actionTypes.ADD:\r\n//       return [...state, payload];\r\n\r\n//     case actionTypes.DELETE:\r\n//       return state.filter(contact => contact.id !== payload);\r\n\r\n//       case actionTypes.LOCAL_STORAGE:\r\n//         return JSON.parse(payload)\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const filter = (state = '', { type, payload }) => {\r\n//   switch (type) {\r\n//     case actionTypes.FILTER:\r\n//       return payload;\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n});\r\n","// import { createStore, combineReducers } from 'redux';\r\nimport {configureStore,getDefaultMiddleware  } from '@reduxjs/toolkit';\r\nimport contactsReducer from './contacts/contactsReducer';\r\nimport { persistStore, persistReducer } from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage' \r\n\r\n\r\nconst persistConfig = {\r\n    key: 'contacts',\r\n    storage,\r\n  }\r\n   \r\n// const basicReducer = combineReducers({\r\n//   contacts: contactsReducer,\r\n// });\r\n\r\n// const store = createStore(\r\n//   basicReducer,\r\n//   window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\r\n// );\r\n\r\nconst persistedReducer = persistReducer(persistConfig, contactsReducer)\r\n\r\nexport const store = configureStore({\r\n reducer: {\r\n  contacts: persistedReducer,\r\n },\r\n middleware: getDefaultMiddleware ( { \r\n    serializableCheck : false})\r\n})\r\n\r\n// const store = configureStore({\r\n//  reducer: {\r\n//   contacts: contactsReducer,\r\n//  } \r\n// })\r\n\r\nexport const persistor = persistStore(store)\r\n\r\n// export default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styleheet/index.css';\nimport {Provider} from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react'\nimport App from './components/App';\nimport {store, persistor} from './redux/store';\n\n\nReactDOM.render(\n<Provider store={store}>\n<PersistGate loading={null} persistor={persistor}>\n    <App />\n    </PersistGate>\n    </Provider>,\n  document.getElementById('root')\n);\n\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"contactForm_form__1DtNv\",\"label\":\"contactForm_label__3PbIR\",\"input\":\"contactForm_input__3pr3y\",\"button\":\"contactForm_button__EvaP2\",\"title\":\"contactForm_title__3iyKE\"};"],"sourceRoot":""}